<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://dnanye.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://dnanye.gitee.io/"/>
  <updated>2022-09-12T05:19:40.335Z</updated>
  <id>https://dnanye.gitee.io/</id>
  
  <author>
    <name>nanye</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c++基础</title>
    <link href="https://dnanye.gitee.io/2022/09/12/c-%E5%9F%BA%E7%A1%80/c-%E5%9F%BA%E7%A1%80/"/>
    <id>https://dnanye.gitee.io/2022/09/12/c-%E5%9F%BA%E7%A1%80/c-%E5%9F%BA%E7%A1%80/</id>
    <published>2022-09-12T05:14:46.000Z</published>
    <updated>2022-09-12T05:19:40.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-变量和基本类型："><a href="#2-变量和基本类型：" class="headerlink" title="2. 变量和基本类型："></a>2. 变量和基本类型：</h2><h3 id="2-1-基本数据类型"><a href="#2-1-基本数据类型" class="headerlink" title="2.1. 基本数据类型"></a>2.1. 基本数据类型</h3><p>算术类型分为<strong>整型</strong>（包含bool、char)、<strong>浮点型</strong></p><p>算术类型的尺寸在不同机器上有所差别，此处只给出最小尺寸。</p><table><thead><tr><th>数据类型</th><th>标识符</th><th>最小尺寸（位bit)</th></tr></thead><tbody><tr><td>布尔</td><td>bool</td><td>未定义</td></tr><tr><td>字符</td><td>char</td><td>8</td></tr><tr><td>宽字符</td><td>wchar_t</td><td>16</td></tr><tr><td>Unicode字符</td><td>char16_t</td><td>16</td></tr><tr><td>Unicode字符</td><td>char32_t</td><td>32</td></tr><tr><td>短整型</td><td>short</td><td>16</td></tr><tr><td>整型</td><td>int</td><td>16</td></tr><tr><td>长整形</td><td>long</td><td>32</td></tr><tr><td>长整型(C++ 11)</td><td>long long</td><td>64</td></tr><tr><td>单精度浮点数</td><td>float</td><td>6位有效数字</td></tr><tr><td>双精度浮点数</td><td>double</td><td>10位有效数字</td></tr><tr><td>拓展精度浮点数</td><td>long double</td><td>10位有效数字</td></tr></tbody></table><p>除去布尔型和拓展字符外，其他的算术类型均可分为<strong>unsigned</strong>和<strong>signed</strong></p><p>其中无符号整型<strong>unsigned int</strong>可写为<strong>unsigned</strong></p><p>字符型可分为<strong>unsigned char 、signed char与char，其中signed char与char不同</strong>,虽然表示方法有三种但是字符表示形式只有两种带符号的和无符号的，而char表现为哪种，看编译器实现。</p><h3 id="2-2-变量"><a href="#2-2-变量" class="headerlink" title="2.2 变量"></a>2.2 变量</h3><p>C++语言和其他大多数语言一样将变量定义为提供一个具名的、可供程序操作的内存空间。但是我们要明确一下现在大多数人认为对象也是具有某种类型数据的内存空间，故<strong>对象和C++语言里的变量一般划等号</strong></p><p><strong>变量的定义</strong>：首先是一个类型说明符，后面接着一个或多个变量名，其中变量名和变量名之间用空格隔开，后以分号结束。</p><p>​列表中变量名的类型有类型说明符确定。在定义时，还可以为一个或多个变量赋值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> sum = <span class="number">0</span>, value, units_sold=<span class="number">0</span>;</span><br><span class="line">Sale_item item;<span class="comment">//item是Sale_item类型数据</span></span><br></pre></td></tr></table></figure><p><strong>变量的初始化：</strong></p><ol><li>当对象获得一个特定的值（这个值可以是表达式）之后，我们就说其被初始化了。</li></ol><p>​注意： 初始化不是赋值，初始化是创建变量时赋予一个初始值，而赋值则是将当前对象的值抹去，将一个新的值替代。</p><ol start="2"><li><p>列表初始化：用花括号括起来初始值赋给变量，这个方式若初始值存在丢失信息的风险那么编译器会报错</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">double</span> ld = <span class="number">3.1415926536</span>;</span><br><span class="line"><span class="type">int</span> a&#123;ld&#125;,b = &#123;ld&#125;;<span class="comment">//列表初始化，编译器报错。因为ld-&gt;a与ld-&gt;b时会发生截断小数部分。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">c</span><span class="params">(ld)</span></span>;<span class="comment">//正确</span></span><br><span class="line"><span class="type">int</span> d = ld;</span><br></pre></td></tr></table></figure></li><li><p>默认初始化：如果初始化时并没有指定初值，则变量会被默认初始化。变量的初始值是由其具有的变量类型决定的。</p><p>若内置的变量未被初始化，则其值由位置决定：</p><p>​&lt;1&gt; 函数外：任何函数体外的变量被初始化为0</p><p>​&lt;2&gt; 函数体内：定义在函数体内的内置类型不被初始化，一个未被定义的内置类型变量的值是未定义的，若试图拷贝或访问该值会引发错误</p></li></ol><p></p><p><strong>变量声明</strong></p><p>为了支持分离式编程，C++将声明和定义分开。声明使得名字被程序所知，而定义则创建与名字对应关联的实体。</p><p>变量的声明仅规定了变量类型和名字，且可多次声明；若变量仅声明而非定义，需要在变量名前加<strong>extern</strong>关键字，且不要显式初始化它。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i;<span class="comment">//仅声明（不能在函数体内使用extern关键字）</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> j = <span class="number">1</span>;<span class="comment">//定义</span></span><br></pre></td></tr></table></figure><p><strong>标识符</strong></p><p>非关键字的、由字母、数字、下划线组成，且标识符不能以数字开头。</p><p><strong>类型转换</strong></p><p>类型转换是将对象从一种给定类型转换为另外一种类型的运算。</p><p><strong>字面值常量</strong></p><p><strong>名字的作用域</strong></p><p>C++当中以花括号为作用域分隔，定义在花括号之外的名字拥有<strong>全局作用域</strong>，一旦声明在整个程序范围内都可使用；定义在函数体内的变量称为<strong>块作用域</strong>，出了函数体就无法访问。所以说一个名字的有效期始于名字的声明语句，到声明语句所在的作用域末端为结束。</p><p><strong>嵌套作用域</strong>：</p><p>作用域也能彼此包含，被包含的作用域称为内层作用域，包含其他作用域的称为外层作用域。</p><p>外层作用域声明了某个名字，它包含的作用域都能访问该名字。并且允许内层作用域重新覆盖外层作用域已有的名字。</p><h3 id="2-3-左值引用（引用）"><a href="#2-3-左值引用（引用）" class="headerlink" title="2.3 左值引用（引用）"></a>2.3 左值引用（引用）</h3><p><strong>引用</strong>：为对象起一个别名。通过在数据类型和变量名之间加上一个&amp;符号并对变量赋值 ，即可定义引用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> &amp;refA = a;<span class="comment">//refA是a的一个别名</span></span><br><span class="line"><span class="type">int</span> &amp;refB;<span class="comment">//报错，引用必须初始化。引用只是给已经存在的对象起一个别名。</span></span><br></pre></td></tr></table></figure><p>定义引用时，程序把引用和它的初始值绑定在一起。而不是拷贝初始值给引用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> &amp;refA = a;<span class="comment">//refA和存储1024的存储空间绑定在一块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引用不是一下过程</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> temp = a;<span class="comment">//临时变量拷贝初始值,重新开辟一块新的空间</span></span><br><span class="line"><span class="type">int</span> &amp;refA = temp;<span class="comment">//引用的是另外的一块内存，而不是初始的那个值</span></span><br></pre></td></tr></table></figure><p>一旦引用初始化完成，引用将和它的初始值对象一直绑定在一起。</p><p><strong>对引用的一些操作：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> &amp;refVal = ival;</span><br><span class="line">refVal = <span class="number">4</span>;<span class="comment">//将4赋给了refVal指向的对象，即ival</span></span><br><span class="line">cout &lt;&lt; ival;<span class="comment">//ival=4;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ii=refVal;<span class="comment">//实质上为ii=ival</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> &amp;refVal2 = refVal;<span class="comment">//实质为 refVal2绑定到ival</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int &amp;&amp;refVal3 = refVal; 错误，引用不是对象，不能定义引用的引用</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> &amp;refVal4 = <span class="number">10</span>;<span class="comment">//错误，10为常量，不是对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> dval=<span class="number">10.0</span>;</span><br><span class="line"><span class="type">int</span> &amp;refVal5=dval;<span class="comment">//错误，refVal5初始值必须是int类型</span></span><br></pre></td></tr></table></figure><h3 id="2-4-指针"><a href="#2-4-指针" class="headerlink" title="2.4 指针"></a>2.4 指针</h3><p>指针也实现了对其他对象的间接访问，而引用和指针有着许多不同点：</p><p>​其一：指针表示就是一个对象，允许拷贝和赋值，在生命周期内可以指向不同对象</p><p>​其二：指针无需定义时赋初值</p><p>声明&#x2F;定义指针：通过在数据类型和变量名之间加上一个*符号 ，即可声明&#x2F;定义指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p;<span class="comment">//声明p是指向int类型的指针</span></span><br></pre></td></tr></table></figure><p>获取对象的地址：</p><p>指针存放的是某个对象的地址，需要取得对象的地址需要使用取地址符号。（&amp;符号）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;ival;<span class="comment">//p存放的是ival的地址或者说p是指向ival的指针</span></span><br></pre></td></tr></table></figure><p><em>注：引用不是对象，不能使用指针指向引用</em></p><p>指针类型的和指针指向的那个对象应该严格对应</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> dval = <span class="number">12.0</span>;</span><br><span class="line"><span class="type">double</span> *pd = &amp;dval;<span class="comment">//正确，初始值是指向double对象的指针</span></span><br></pre></td></tr></table></figure><p><strong>指针的值</strong></p><ol><li>指向一个对象</li><li>指向紧邻对象所占空间的下一个位置</li><li>空指针，不指向任何对象</li><li>无效指针，除了上述情况以外的其他值（试图拷贝与访问该类指针均会出错）</li></ol><p><strong>利用指针访问对象</strong></p><p>​如果需要访问指针指向的一个对象的值时，允许用解引用符号（*****）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *pi = &amp;ival;</span><br><span class="line">cout &lt;&lt; *Pi &lt;&lt;<span class="string">&quot;\t&quot;</span>;<span class="comment">//由符号*得到指针pi所指的对象，输出42</span></span><br><span class="line"></span><br><span class="line">*pi = <span class="number">0</span>;<span class="comment">//*pi得到pi指向的对象，即可经由pi为变量ival赋值</span></span><br><span class="line">cout&lt;&lt;*pi&lt;&lt;<span class="string">&quot;\t&quot;</span>&lt;&lt;ival;<span class="comment">//得到结果00</span></span><br></pre></td></tr></table></figure><p><strong>空指针</strong></p><p>不指向任何对象，在判断指针是否为空使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *pi = <span class="literal">nullptr</span>;<span class="comment">//等价为 int *pi = 0;</span></span><br><span class="line"><span class="type">int</span> *pi2 = <span class="number">0</span>;<span class="comment">//pi2初始化为常量值0</span></span><br><span class="line"><span class="type">int</span> *pi3 = <span class="literal">NULL</span>;<span class="comment">//pi3=0;需要使用cstdlib头文件，NULL=0;</span></span><br></pre></td></tr></table></figure><p><strong>赋值和指针</strong></p><p>指针不同于引用，它同一般变量一般可以将原有的数据覆盖，使其重新指向一个新的对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**改变指针的对象*******/</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> *pi = <span class="number">0</span>;<span class="comment">//初始化指针pi为空指针，不指向任何对象</span></span><br><span class="line"><span class="type">int</span> *pi2 = &amp;i;<span class="comment">//初始化pi2,pi2为指向i的指针</span></span><br><span class="line"><span class="type">int</span> *pi3;<span class="comment">//若定义在块内，无法确定其值</span></span><br><span class="line"></span><br><span class="line">pi3 = pi2;<span class="comment">//pi2和pi3指向同一个对象</span></span><br><span class="line">pi2 = <span class="number">0</span>；   <span class="comment">//pi2不指向任何对象</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/**改变指针指向的对象的值*****/</span></span><br><span class="line">*pi3 = <span class="number">0</span>;<span class="comment">//pi3指向的对象i里面存储的值变为0</span></span><br></pre></td></tr></table></figure><p><strong>其它指针操作</strong></p><p>只要指针拥有一个合法值，就能用在条件表达式中。如果指针的值为0，条件去false</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="built_in">int</span> jval = <span class="number">2048</span>;</span><br><span class="line"><span class="built_in">int</span> *pi = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> *pi2 = &amp;ival;</span><br><span class="line"><span class="built_in">int</span> *pi3 = &amp;jval;</span><br><span class="line"><span class="keyword">if</span>(pi)<span class="comment">//pi的值为0，因此条件的值为false</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="keyword">if</span>(pi2)<span class="comment">//pi2的值为&amp;ival不为0，故条件的值为true</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="keyword">if</span>(pi2 == pi3)<span class="comment">//三种情况：</span></span><br><span class="line">    <span class="comment">//1、pi2与pi3存放的地址是否一致，一致为tue，反之为false。</span></span><br><span class="line">    <span class="comment">//2、pi2与pi3的均为空时为true</span></span><br><span class="line">    <span class="comment">//3、pi2和pi3都指向同一个对象的下一个地址</span></span><br><span class="line">    <span class="comment">//...在第三种情况下有一种可能：pi2指向ival的下一个地址，pi3指向jval的下一个地址，也可能出现相等的情况</span></span><br><span class="line"><span class="keyword">if</span>(pi != pi3)    <span class="comment">//与上面类似</span></span><br></pre></td></tr></table></figure><p><em><em>void</em> 指针</em>*：是一种特殊的指针，可以存放任意对象的地址。我们无法了解该地址里到底存放的是什么类型的对象</p><p><strong>指向指针的指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> *pi1 = &amp;ival;<span class="comment">//指向一个int类型的数</span></span><br><span class="line"><span class="type">int</span> **ppi = &amp;pi1;<span class="comment">//指向一个int类型的指针</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ival &lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; *pi1 &lt;&lt;endl;<span class="comment">//输出ival的值</span></span><br><span class="line">cout &lt;&lt; **pii &lt;&lt;endl;<span class="comment">//输出ival的值</span></span><br></pre></td></tr></table></figure><p><strong>指向指针的引用</strong></p><p>因为引用不是一个对象，故<strong>不能定义指向引用的指针</strong></p><p>因为指针是一个对象，所以我们<strong>可以对指针取一个别名、对指针进行引用</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="type">int</span> *&amp;r = p;<span class="comment">//从右往左理解，r是一个引用，是一个对指针的引用，是一个对int类型的指针的引用</span></span><br><span class="line"></span><br><span class="line">r = &amp;ival;<span class="comment">//r引用了一个指针，故给r赋值&amp;ival就是令p指向ival</span></span><br><span class="line">*r = <span class="number">0</span>;<span class="comment">//ival=0；</span></span><br></pre></td></tr></table></figure><h3 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h3><p>当程序需要某个对象的值在以后运行过程当中不被修改可以使用<strong>const</strong>关键字进行修饰</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> bufSize = <span class="number">512</span>;<span class="comment">//输入缓冲区大小</span></span><br><span class="line"><span class="comment">//bufSize = 1024;//当试图修改const修饰的bufSize的对象时，编译器报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const int i;报错，const对象必须初始化，因为const对象一经创建便不能改变</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Cache = bufSize;<span class="comment">//当利用一个对象初始化另一个对象时，无需考虑是否是被const所限定</span></span><br><span class="line"><span class="comment">//毕竟我们不去修改等号后面的值</span></span><br></pre></td></tr></table></figure><p><strong>默认情况下，const对象仅在文件内有效</strong></p><p>默认情况下，const对象仅在文件内有效。</p><p>当多个文件出现同名的const对象，其实相同于在不同的文件里分别定义了独立的变量。</p><p>想要在一个文件里定义后，其它文件共享这个const对象只需要添加<strong>extern关键字</strong></p><p><strong>const的引用</strong></p><p>可以将引用绑定到const对象上，我们称为<strong>对常量的引用</strong>，与普通引用不一样的是我们不能使用引用修改对象的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r1 = ival;<span class="comment">//正确，引用及对于对象都是常量</span></span><br><span class="line">r1=<span class="number">42</span>;<span class="comment">//错误，r1是对常量的引用</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> &amp;r2=ival;<span class="comment">//错误，试图用一个非常量引用绑定一个常量对象</span></span><br></pre></td></tr></table></figure><p>因为不能通过引用修改常量ival的值，r2绑定的应该是可供用户修改和访问的值，故r2无法绑定ival。</p><p>小结一下：<strong>普通引用无法绑定常量对象，常量对象需要使用对常量的引用（常量引用）</strong></p><p>上述说了<strong>引用的类型必须和数据的类型一致</strong>，但是有例外的情况：</p><p>在<strong>初始化常量引用时允许任意表达式作为初始值，只要将该表达式结果转换成引用的类型即可</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">23</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r1 = i;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r2 = r1;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r3 = r1*<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> &amp;r4 = r1*<span class="number">2</span>;<span class="comment">//错误，r4是一个非常量引用，而r1引用绑定的是一个常量对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> &amp;ref1 = ival;<span class="comment">//正确</span></span><br><span class="line"><span class="comment">/***以下是编译器的使用过程*******/</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> tmp = ival;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> &amp;ref1 = tmp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当ref1为非常量引用时，ref1就可以修改所引对象的值，那么它只可能修改temp的值。</span></span><br><span class="line"><span class="type">double</span> tmp = ival;</span><br><span class="line"><span class="comment">/***以下是编译器的使用过程*******/</span></span><br><span class="line"><span class="type">double</span> tmp = ival;</span><br><span class="line"><span class="type">double</span> &amp;ref1 = tmp;</span><br><span class="line"><span class="comment">//我们无法修改ival的值，这种行为是非法的</span></span><br></pre></td></tr></table></figure><p><strong>常量引用仅对引用可参与的操作进行限定，对引用的对象并没有进行限制</strong></p><p>因为对象可能是一个非常量，可以通过其它途径进行修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> &amp;i1= ival;<span class="comment">//非常量引用绑定ival</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;i2=ival;<span class="comment">//常量引用也绑定ival</span></span><br><span class="line">r1 = <span class="number">0</span>;<span class="comment">//允许，r1并非常量，i=0;</span></span><br><span class="line">r2 = <span class="number">0</span>;<span class="comment">//不允许，r2是一个常量引用是无法进行修改的</span></span><br></pre></td></tr></table></figure><p><strong>指针和const</strong></p><p>指向常量的指针不能用于修改其指向的对象的值，<strong>想要存放常量对象的地址，只能用指向常量的指针。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="number">3.1415</span>;<span class="comment">//常量对象</span></span><br><span class="line"><span class="type">double</span> *ptr = &amp;pi;<span class="comment">//错误，ptr是一个普通的指针</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> *cptr = &amp;pi;<span class="comment">//正确</span></span><br><span class="line">*cptr = <span class="number">2</span>;<span class="comment">//错误，pi是一个常量不能修改</span></span><br></pre></td></tr></table></figure><p>指针必须和指向的对象类型匹配，但是也有例外：<strong>允许让一个指向常量的指针指向一个非常量对象</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> *cptr;</span><br><span class="line"><span class="type">double</span> ival = <span class="number">1.23</span>;</span><br><span class="line">cptr = &amp;ival;<span class="comment">//正确，但是不能通过cptr修改ival的值</span></span><br></pre></td></tr></table></figure><p><em>tip:可以这么想：所谓的对常量的指针和引用，不过是自己一厢情愿的认为自己引用&#x2F;指向了常量，所以会自觉的不去修改它</em></p><p><strong>const指针</strong></p><p>C++允许指针为常量，因为指针就是一个对象，故常量指针必须初始化，而一旦初始化完成它的值就不能改变了。</p><p>即：<strong>常量指针只能指向一个对象，不能指向其它的对象</strong></p><p>将<em>放在const之前就能说明指针是一个常量，即*<em>不变的是指针的数值是常量，而非指向的那个对象的值</em></em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> errNum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> curErr = &amp;errNum;<span class="comment">//curNum一直指向errNum（理解时，从右往左看）</span></span><br><span class="line">*curErr = <span class="number">1</span>;<span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *cptr=&amp;errNum;<span class="comment">//cptr是一个指向变量的常量指针</span></span><br></pre></td></tr></table></figure><h3 id="顶层const"><a href="#顶层const" class="headerlink" title="顶层const"></a>顶层const</h3><p><strong>顶层const表示任意对象时常量</strong></p><p><strong>底层const表示复合类型的基本类型有关。</strong></p><p><strong>毕竟特殊的是，指针既可以是顶层const也可以是底层const</strong></p><p>举个栗子：</p><p>常量本身就是常量，顶层const</p><p>指针指向的对象是常量，底层const</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p1 =&amp;i;<span class="comment">//顶层const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ci = <span class="number">42</span>;<span class="comment">//顶层const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p2=&amp;ci;<span class="comment">//允许改变p2的值,p2指向其它值，底层const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p3 = p2;<span class="comment">//右边的为顶层，左边为底层const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r = ci;<span class="comment">//用于声明引用的const都是底层const</span></span><br></pre></td></tr></table></figure><p><strong>当执行对象的拷贝时，顶层const不受影响</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ci =i;<span class="comment">//顶层const</span></span><br></pre></td></tr></table></figure><p>当执行对象拷贝时，拷入与考拷出的对象必须有相同的底层const资格，或者两个对象的数据结构必须能转换。</p><p>一般来说：<strong>非常量能转换为常量，都是常量不能转换为非常量</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *p2=&amp;ci;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p3 = p2;</span><br><span class="line"><span class="type">int</span> *p = p3;<span class="comment">//错误，p3包含了底层const的含义</span></span><br><span class="line">p2 = p3;<span class="comment">//正确，p2和p3都是底层const</span></span><br><span class="line"></span><br><span class="line">p2 = &amp;i;<span class="comment">//正确，int* 能够转换为const int *</span></span><br></pre></td></tr></table></figure><p><strong>constexpr和常量表达式</strong></p><p>常量表达式指的是值不会改变，编译过程即可得到结果的表达式。</p><p>字面值和用常量表达式初始化的const对象也是常量表达式。</p><p>一个对象（或表达式）是不是常量表达式由它的数据类型和初始值共同决定。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> max = <span class="number">20</span>;<span class="comment">//max为常量表达式</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> limit = max + <span class="number">1</span>；<span class="comment">//limit也是常量表达式</span></span><br><span class="line"><span class="type">int</span>staff_size = <span class="number">10</span>;<span class="comment">//staff_size不是常量表达式，其仅是普通的int不是const int</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sz = <span class="built_in">getSize</span>();<span class="comment">//sz不是常量表达式，因为其初始值要在运行过程才能获得</span></span><br></pre></td></tr></table></figure><p>在C++11当中，允许变量声明为constexpr类型的变量必然是常量表达式，且在初始化时必须用常量表达式初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mf = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> lim = mf +<span class="number">1</span>;<span class="comment">//mf为常量表达式</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> sz = <span class="built_in">size</span>();<span class="comment">//只有size的返回值是一个constexpr才是正确的</span></span><br></pre></td></tr></table></figure><p><strong>字面值类型</strong></p><p>显而易见的、易获得的类型叫做字面值类型，例如：算术类型、引用和指针均属于字面值类型。</p><p>尽管指针和引用都可以声明为constexpr，但它的初始值却受到严格限制，一个constexpr指针的初始值必须是：</p><ol><li>nullptr</li><li>0</li><li>某个对象的地址</li></ol><p>函数体内的变量不是固定不变的，不能用来初始化constexpr指针</p><p>函数体外的变量是固定不变的，可以用来初始化constexpr指针</p><p><strong>指针与constexpr</strong></p><p>constexpr声明中如果定义了一个指针，限定符constexpr仅对指针有效，与指针所指的对象无关</p><p>即constexpr将指针声明为一个顶层const</p><h3 id="处理类型"><a href="#处理类型" class="headerlink" title="处理类型"></a>处理类型</h3><p><strong>类型别名</strong></p><p>可以使用<strong>typedef</strong>和<strong>using</strong>来定义类型的别名：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> wage;</span><br><span class="line"><span class="keyword">typedef</span> wage base,*p;<span class="comment">//base是double的同义词，p是double* 的同义词</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> SI = Sale_Item;</span><br></pre></td></tr></table></figure><p><strong>指针、常量和类型别名</strong></p><p>若类型别名替代的复合类型或常量，会出现意想不到的后果.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *p;<span class="comment">//p是指向char类型的指针</span></span><br><span class="line"><span class="type">const</span> p cstr = <span class="number">0</span>;<span class="comment">//p是指向char的常量指针</span></span><br><span class="line"><span class="type">const</span> p *ps;<span class="comment">//ps是一个指针，它的对象是指向char的常量指针</span></span><br></pre></td></tr></table></figure><p><strong>auto类型说明符</strong></p><p>auto关键字能让编译器替我们分析表达式所属的类型。</p><p>和原先那些特定的类型说明符（int、double等等)不同，auto使用的是类型说明符推算变量的类型。</p><p>显示，auto定义的变量必须有初始值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> item = val1 + val2;<span class="comment">//根据val1+val2相加的结果推算出item的类型</span></span><br></pre></td></tr></table></figure><p>使用auto可以在同一语句中声明多个变量。</p><p>因为一条语句只能有一个基本数据类型，所以该语句中所有变量的初始基本数据必须一致。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> i = <span class="number">0</span>; *p = &amp;i;<span class="comment">//正确，i为int型数据，p为指向int的指针</span></span><br><span class="line"><span class="keyword">auto</span> j = <span class="number">0</span>; pi = &amp;j;<span class="comment">//错误，类型不一致</span></span><br></pre></td></tr></table></figure><p>当初始值为引用时，编译器会将引用对象的类型作为auto的类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> &amp;r = i;</span><br><span class="line"><span class="keyword">auto</span> j = r;<span class="comment">//j是一个 整数</span></span><br></pre></td></tr></table></figure><p>auto基本会忽略顶层const，底层const会保存下来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ival = i,&amp;cr = i;</span><br><span class="line"><span class="keyword">auto</span> b = ival;<span class="comment">//b是一个整数，（顶层const被忽略了）</span></span><br><span class="line"><span class="keyword">auto</span> c = cr;<span class="comment">//c也是一个整数</span></span><br><span class="line"><span class="keyword">auto</span> d = &amp;ival;<span class="comment">//d为整型指针</span></span><br><span class="line"><span class="keyword">auto</span> e = &amp;ival;<span class="comment">//e是一个指向整数常量的指针（常量对象取地址是一种底层const)</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> f = ival;<span class="comment">//ival是一个整型对象，f为const int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> &amp;g = ival;<span class="comment">//ival是一个int常量对象,g为整数型常量引用</span></span><br><span class="line"><span class="keyword">auto</span> &amp;h = <span class="number">42</span>;<span class="comment">//不能为一个非常量引用绑定字面值</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> &amp;j = <span class="number">42</span>;<span class="comment">//正确，将常量引用绑定字面值</span></span><br></pre></td></tr></table></figure><h3 id="decltype类型指示符"><a href="#decltype类型指示符" class="headerlink" title="decltype类型指示符"></a>decltype类型指示符</h3><p>decltype类型作用是选择并返回操作数类型，在此过程当中编译器分析表达式并得到它的类型，不会实际计算表达式的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(<span class="built_in">f</span>()) sum =x;<span class="comment">//sum的类型就是类型f的返回值类型</span></span><br></pre></td></tr></table></figure><p>decltype使用的表达式是一个变量，则decltype返回该对象的类型（包括顶层const和引用）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ci = <span class="number">0</span>, &amp;cj = ci;</span><br><span class="line"><span class="keyword">decltype</span>(ci) x = <span class="number">0</span>;<span class="comment">//x的类型就是const int</span></span><br><span class="line"><span class="keyword">decltype</span>(cj) y = x;<span class="comment">//y的类型就是const int&amp;</span></span><br><span class="line"><span class="keyword">decltype</span>(cj) z;<span class="comment">//z是一个引用，必须初始化</span></span><br></pre></td></tr></table></figure><p><strong>decltype和引用</strong></p><p>decltype使用的是表达式而不是一个变量，则返回的是表达式的类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">42</span>; *p = &amp;i; &amp;r = i;</span><br><span class="line"><span class="keyword">decltype</span>(r+<span class="number">0</span>) b;<span class="comment">//r+0是一个int,因此b是一个int</span></span><br><span class="line"><span class="keyword">decltype</span>(*p) c<span class="comment">//*p是解引用操作，得到一个引用类型，故c为int &amp;,需要初始化</span></span><br></pre></td></tr></table></figure><p>如果decltype使用的是不加括号的变量，得到的就是变量的类型</p><p>如果decltype使用的是加一层或多层括号的变量，得到的就是表达式的类型（永远为引用类型）</p><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><p>类的定义在此处先用C语言的struct类型作为定义；</p><p>类体定义类的成员，类的成员定义了类的对象的具体内容。</p><p>每个对象都有自己的一份数据成员 拷贝，修改一个对象的数据成员不会影响其它成员。</p><p>C++11规定可以用数据成员提供一个<strong>类内初始值</strong>。创建对象可以用这些初始值初始化类内的数据成员。</p><p>如果没有类内初始值的成员将被默认初始化。</p><p><strong>预处理器</strong></p><p>头文件保护符：</p><p>#ifndef</p><p>#define</p><p>#endif</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2-变量和基本类型：&quot;&gt;&lt;a href=&quot;#2-变量和基本类型：&quot; class=&quot;headerlink&quot; title=&quot;2. 变量和基本类型：&quot;&gt;&lt;/a&gt;2. 变量和基本类型：&lt;/h2&gt;&lt;h3 id=&quot;2-1-基本数据类型&quot;&gt;&lt;a href=&quot;#2-1-基本数据类</summary>
      
    
    
    
    <category term="C++" scheme="https://dnanye.gitee.io/categories/C/"/>
    
    
    <category term="C++" scheme="https://dnanye.gitee.io/tags/C/"/>
    
    <category term="数据类型，引用，指针，const" scheme="https://dnanye.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%BC%95%E7%94%A8%EF%BC%8C%E6%8C%87%E9%92%88%EF%BC%8Cconst/"/>
    
    <category term="类" scheme="https://dnanye.gitee.io/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>C#当中的类和对象</title>
    <link href="https://dnanye.gitee.io/2022/09/10/c-class/"/>
    <id>https://dnanye.gitee.io/2022/09/10/c-class/</id>
    <published>2022-09-10T09:43:36.000Z</published>
    <updated>2022-09-10T09:49:24.663Z</updated>
    
    <content type="html"><![CDATA[<p>在C#需要使用对象进行编程实现时，我们需要将该对象的类给定义出来，毕竟类定义了每个对象应该有的什么属性（这里的属性和下文的属性不一样，这里的属性是指实体对象应当具有的特性）和什么动作。</p><p>创建新类的语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[访问修饰符] <span class="keyword">class</span> 类名</span><br><span class="line">&#123;</span><br><span class="line">    [访问修饰符] &lt;数据类型&gt; 数据成员；<span class="comment">//字段，这里和java的名称不一样在java当中称为属性</span></span><br><span class="line">    [访问修饰符] &lt;返回值类型&gt; 方法名；    <span class="comment">//成员函数</span></span><br><span class="line">     <span class="comment">/*...</span></span><br><span class="line"><span class="comment">     除了定义以上两种成员意外我们还可以定义</span></span><br><span class="line"><span class="comment">     事件</span></span><br><span class="line"><span class="comment">     嵌套类</span></span><br><span class="line"><span class="comment">     属性（这个和java的不一样啊！！！）</span></span><br><span class="line"><span class="comment">     构造函数（很重要）</span></span><br><span class="line"><span class="comment">     析构函数</span></span><br><span class="line"><span class="comment">     ....</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问修饰符指定了类和其成员的访问权限规则，不指定则使用默认权限,修饰符有以下几种</p><p><em><strong>public</strong></em>: 公有访问，可以被是由任意程序集访问</p><p><em><strong>private</strong></em>: 私有访问，仅限本类成员（数据成员与方法成员访问）</p><p><em><strong>internal</strong></em>：内部访问，在该程序集里的所有类均可访问</p><p><em><strong>protected</strong></em>: 受保护访问，仅能由本类与该类的派生类访问。</p><p>下面我们做一下举例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span><span class="title">People</span><span class="comment">//创建“人”这个类</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>name;<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> sex;<span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>ID;<span class="comment">//ID号码</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//方法体（略）</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">class</span><span class="title">Dog</span><span class="comment">//默认的访问修饰符为internal</span></span><br><span class="line">        &#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> run</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">internal</span> Date<span class="comment">//是不是觉得很怪，但是它是表示protected or internal</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到<em><strong>class</strong></em>的定义你是否会想到<em><strong>C</strong></em>语言里面的结构体，想道它是否可以像<em><strong>C++<em><strong>那样用于定义类呢？其实</strong></em>class</strong></em>和<em><strong>struct</strong></em>可以用于创建对象，只不过<em><strong>struct</strong></em>创建的对象分布在<strong>栈</strong>上，<em><strong>class</strong></em>创建的对象则托管在<strong>堆</strong>上面。</p><p>好了，我们已经知道了如何定义一个模板，那么我们如何根据模板创建一个实例呢？就像我们到餐厅点餐一样，我们知道了菜单。</p><p>如何将菜单上的菜转换为一道可以食用的菜呢？不可能将菜单当作实物吃了吧！这时就想要让服务员告诉后厨我们需要的菜，并且后厨开始准备我们的菜，然后菜做好后让服务员从后厨端上来！</p><p>这个过程就是<strong>实例化对象</strong>的过程，我们现在不对这个过程进行讲解，只要告诉你一个实例化对象的方法：使用<em><strong>new</strong></em>运算符就可实现。<del>所以编程圈里面有个笑话，找不到对象怎么办，new一个对象出来就行了</del></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date date=<span class="keyword">new</span> Date();</span><br></pre></td></tr></table></figure><p>date是Date对象的名字，它到底存储的是什么我没找到答案，如果按照之前说的它是JAVA、C++等语言的集合体，那么我们可以推断其保存的是指向该对象的指针或引用。</p><p>实例化对象的实质是在内存当中开辟一块内存（如果使用的是<em><strong>class</strong></em>,在堆内存存储，如果使用的是<em><strong>struct</strong></em>则在栈内存储）存储对象的字段和方法，而<strong>类则不会开辟内存，只有将类实例化为对象才会开辟对象。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在C#需要使用对象进行编程实现时，我们需要将该对象的类给定义出来，毕竟类定义了每个对象应该有的什么属性（这里的属性和下文的属性不一样，这里的属性是指实体对象应当具有的特性）和什么动作。&lt;/p&gt;
&lt;p&gt;创建新类的语法如下：&lt;/p&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="C#" scheme="https://dnanye.gitee.io/categories/C/"/>
    
    
    <category term="C#" scheme="https://dnanye.gitee.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="https://dnanye.gitee.io/2022/09/10/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://dnanye.gitee.io/2022/09/10/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2022-09-10T04:46:05.000Z</published>
    <updated>2022-09-10T04:54:24.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-面向对象编程"><a href="#C-面向对象编程" class="headerlink" title="C#面向对象编程"></a>C#面向对象编程</h1><p>我们之前提到很多次的面向对象，那么你应该有一个疑惑：对象，这是个嘛玩意？可以用来做什么？</p><p>在说面向对象之前，我们先看一段对话：</p><blockquote><p>苏格拉底:我们的论敌要问了:请告诉我什么是美?</p><p>希庇亚:我想他问的问题是,什么东西是美的? </p><p>苏格拉底:我想不是这个意思,他要问的是美是什么。</p><p>希庇亚:这两个问题有区别吗?</p><p>苏格拉底:有区别。他问的不是:什么东西是美的,而是:什么是 美?请你想一想。</p><p>希庇亚:我懂了,我来告诉他什么是美,叫他无法反驳。什么是美， 苏格拉底你记清楚,美是一位漂亮小姐。</p><p>苏格拉底:好!回答得真妙!不过我要是这样回答,可要遭到论敌反驳。我的论敌会这样问我:“苏格拉底,请答复这个问题:凡是美的那些东西真正是美,是不是因为有一个美本身存在,才使那些东西美 ?”我就会回答他说,一位漂亮的年轻小姐的美,就是使一切东西成其为美的。你以为如何?</p><p>希庇亚: 他敢说漂亮的年轻小姐不美吗?</p><p>苏格拉底:他当然敢,他会说:“你真妙,苏格拉底,但是一匹漂亮的母马不也可以是美的吗?神不是也曾经称赞过马的美?”</p><p>希庇亚:不错,神说母马很美,是有道理的。</p></blockquote><p>看出来了吗？苏格拉底一说的“美”是一种抽象的概念，而希庇亚则用具体的事物进行回答。</p><p>按照上面的逻辑我们可以得知一个推论：</p><p>“美”这个概念是一切美的事物所具有的抽象集合体，而“美人”、“马”这些东西则是具有“美”这个共有概念的具体实物。</p><p>那么我们也可以继续推导到我们需要的概念：某个抽象的概念是一群具有共有的特性的实物而形成的，而每个实物都具有该概念的特性。可能有点过于抽象了，我们这样说：</p><p>狗是一个抽象的概念吧，每种狗都有一些特有的属性（例如具有身高、体重）和一些动作（跑、跳、走）。</p><p>比如某一只哈士奇是一个具体的动物吧，它具有狗这个抽象概念这一特性的所有内容，它包含狗所特有的属性和动作。例如这只狗身高一米，体重40斤，它也会跑、会走。</p><p>那么我们就可以说“狗”这一对所有狗具有的所有特性的抽象概念叫做<strong>类</strong>，类就是一个<strong>模板</strong>，它并不是一个具体的东西，例如我们我们根据“狗”这抽象概念，我们以后发现一种新的生物它满足这个概念的全部内容，那么我们会将其称为某一种狗。那种生物就是狗这个抽象概念的具体实现。</p><p>按照我们前面说的那种生物的某一只实体（你随便可以将它命名为Al狗，只要是一种狗就行了）是根据“狗”这一抽象概念的具体实现我们叫做<strong>对象</strong>，既然如此某只哈士奇也是“狗”这一抽象概念的具体实现”，我们也叫哈士奇是一个对象。</p><p>好了！我们总结一下<strong>：类就是所有对象的抽象，所有对象就是类的具体实现，对象具有类这个模板的所有特性！！！</strong></p><p>既然我们知道了什么是对象了，那么面向对象又是什么呢？这一点我们和面向过程编程对比举个栗子说一下：</p><p>比如笔者看书这个行为，如果用面向过程编程的方式要这么做：笔者去寻找笔者需要看的书，笔者看到需要的书后将其拿到书桌，笔者翻开书，书被翻开，笔者好好的看书，最后将书闭合放回原处。</p><p>如果用面向对象编程的方式只要这么做：定义两个对象，一个对象是由三次元的“人”这个类具体化而成的“笔者”这个对象，笔者这个对象需要定义几个属性：姓名、性别、地址、编号——不然这怎么确认我是我呢！（笑）还要几个动作（找书、拿书、翻书、放书）才能完成看书这个事件。</p><p>一个对象是书，也需要定义几个属性：书名、ISBN编号、作者等等相关信息，不然笔者可能找到一堆莫名其妙的东西了！还有一个书被翻开的动作。</p><p>面向对象只需要将两个对象组合在一起就可以完成这一个程序的所有功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-面向对象编程&quot;&gt;&lt;a href=&quot;#C-面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;C#面向对象编程&quot;&gt;&lt;/a&gt;C#面向对象编程&lt;/h1&gt;&lt;p&gt;我们之前提到很多次的面向对象，那么你应该有一个疑惑：对象，这是个嘛玩意？可以用来做什么？&lt;/</summary>
      
    
    
    
    <category term="C#" scheme="https://dnanye.gitee.io/categories/C/"/>
    
    <category term="JAVA" scheme="https://dnanye.gitee.io/categories/C/JAVA/"/>
    
    <category term="C++" scheme="https://dnanye.gitee.io/categories/C/JAVA/C/"/>
    
    
    <category term="JAVA" scheme="https://dnanye.gitee.io/tags/JAVA/"/>
    
    <category term="C++" scheme="https://dnanye.gitee.io/tags/C/"/>
    
    <category term="C#" scheme="https://dnanye.gitee.io/tags/C/"/>
    
    <category term="面向对象" scheme="https://dnanye.gitee.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>C#语法基础</title>
    <link href="https://dnanye.gitee.io/2022/09/10/C-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <id>https://dnanye.gitee.io/2022/09/10/C-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</id>
    <published>2022-09-10T01:56:23.000Z</published>
    <updated>2022-09-10T02:10:44.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h1><p>本部分重点指出<em><strong>C#<em><strong>不同于</strong></em>C</strong></em>语言之间不同的部分，相同部分会一句带过，如果有不明白的地方请看<em><strong>《C Primer Plus》</strong></em>，在此不再赘述了。</p><h2 id="2-1-数据类型"><a href="#2-1-数据类型" class="headerlink" title="2.1 数据类型"></a>2.1 数据类型</h2><p> C#的数据类型分为值类型与引用数据类型</p><h3 id="2-1-1-值类型"><a href="#2-1-1-值类型" class="headerlink" title="2.1.1 值类型"></a>2.1.1 值类型</h3><ol><li>整型</li></ol><table><thead><tr><th>数据类型</th><th>标识符</th><th>范围</th></tr></thead><tbody><tr><td>字节</td><td>sbyte</td><td>-128~127</td></tr><tr><td>无符号字节</td><td>byte</td><td>0~255</td></tr><tr><td>短整型</td><td>short</td><td>-32768~32767</td></tr><tr><td>无符号短整型</td><td>ushort</td><td>0~65535</td></tr><tr><td>整型</td><td>int</td><td>-2147483648~2147483647</td></tr><tr><td>无符号整型</td><td>uint</td><td>0~2147483647*2+1</td></tr><tr><td>长整形</td><td>long</td><td>-~+</td></tr><tr><td>无符号整型</td><td>ulong</td><td>0~+</td></tr></tbody></table><ol start="2"><li><p>浮点型</p><p>单精度float</p></li></ol><p>​双精度double</p><p>​       十进制实数decimal       字节数为16</p><pre><code>3. 字符型charASCII、Unicode编程字符、转义字符   4. 布尔型（bool)     true\false   5. 结构类型struct   6. 枚举类型enum</code></pre><h3 id="2-1-2-引用类型"><a href="#2-1-2-引用类型" class="headerlink" title="2.1.2 引用类型"></a>2.1.2 引用类型</h3><p>在引用类型当中，不会直接存储数值，而是存储实际数值的<strong>引用（地址）</strong></p><p>C#的引用类型分为数组、类、接口、委托、内置引用类型、字符串</p><p>​<strong>1. 数组</strong></p><p>作用：将一批类型相同的数据元素存储到一块连续的内存块中，每个元素对应有一个唯一的索引。</p><p>声明一维数组：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">baseType[] arrayName;<span class="comment">//baseType为数组类型，可以是值类型，也可以是引用类型</span></span><br><span class="line"><span class="comment">//例：</span></span><br><span class="line"><span class="built_in">int</span> [] array;<span class="comment">//为int类型数组</span></span><br><span class="line"><span class="built_in">string</span>[] s1;<span class="comment">//为string类型数组</span></span><br><span class="line">Animal [] animalArr;<span class="comment">//为类类型的数组</span></span><br></pre></td></tr></table></figure><p>定义一维数组（实例化数组）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int [] array=new int[5];</span><br><span class="line">int [] array1=&#123;1,2,3,4&#125;;</span><br></pre></td></tr></table></figure><p>获取数组长度</p><p>通过Array类的<em><strong>length</strong></em>属性即可得到</p><p>二维数组：每个数组元素均由n个该类型发数据构成。</p><p>定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baseType[,] array=new baseType[N1,N2];</span><br></pre></td></tr></table></figure><p>​    <strong>2. 字符串</strong></p><p>类型关键字为string,声明一个string类型数据，其实就是在内存空间创建了一个空的引用关系。</p><p>初始化一个字符串，相当于引用了多个字符类型的数据</p><h3 id="2-1-3-类型转换"><a href="#2-1-3-类型转换" class="headerlink" title="2.1.3 类型转换"></a>2.1.3 类型转换</h3><p><strong>1.隐式转换（编译器直接转换）</strong></p><p>值类型到值类型的一般转换（例如float–&gt;double等等)在此不多赘述，我们需要了解的是将值类型到引用类型的转换。</p><p>装箱就是自动将基本数据类型转换为引用类型，拆箱就是自动将引用类型转换为基本数据类型（在java当中非常有用的一个功能）</p><p>例如要将值类型转换为object类型，可以创建一个基于该值类型的object实例。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">char</span> chData=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">object</span> obj=ch;</span><br><span class="line">Console.WriteLine(obj);<span class="comment">//输出a</span></span><br></pre></td></tr></table></figure><p><strong>2.显式转换（用户直接转换）</strong></p><p>值类型的：</p><p>（类型名）（表达式）</p><p>拆箱：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a=1;</span><br><span class="line">object obj=a;</span><br><span class="line">int intA=(int)obj;</span><br></pre></td></tr></table></figure><p>使用<em><strong>Convert</strong></em>命令显示转换，例如<em><strong>Convert.ToBoolean(value);</strong></em></p><h2 id="2-2-变量与常量-略"><a href="#2-2-变量与常量-略" class="headerlink" title="2.2 变量与常量(略)"></a>2.2 变量与常量(略)</h2><p>这个东西哪个语言都差不多，不想再说了-____-</p><h2 id="2-3-语句"><a href="#2-3-语句" class="headerlink" title="2.3 语句"></a>2.3 语句</h2><p>只列一下语句的类型</p><p><strong>1.表达式语句</strong>（算术、赋值、关系、逻辑、位等运算）</p><p><strong>2.流程控制语句</strong>（if\else、switch、while\do…while、for、foreach（用于遍历数组）、循环中断【break\continue\goto】)</p><p>这里重点提一下foreach语句：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> [] arr=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    arr[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">int</span> i <span class="keyword">in</span> arr)<span class="comment">//i代替了arr当中的每个元素的变量名，它会自动遍历所有的元素，直到遍历完成</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;array[&#123;0&#125;]=&#123;1&#125;&quot;</span>,j++,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>3.异常处理语句</strong></p><p>在程序运行过程中，经常遇到错误而中断而中断程序的运行，这种情况叫做异常。</p><p>在.NET Framework中，异常的基类（后面在继承会说明这个概念）为Exception.</p><p>处理异常的语句有<em><strong>try…catch</strong></em>、<em><strong>throw</strong></em>、<em><strong>finally</strong></em>(这个语句和大多数面向对象编程语言一致)</p><p>throw语句在特点情况下自动抛出异常，基本格式为</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> expresion<span class="comment">//expresion表示抛出的异常类型的对象（派生至System.Exception类的对象）</span></span><br></pre></td></tr></table></figure><p>当 throw 语句执行时，它后面的语句将不执行，此时程序转向调用者程序，寻找与之相匹配的 catch 语句，执行相应的异常处理程序。如果没有找到相匹配的 catch 语句，则再转向上一层的调用程序。这样逐层向上，直到最外层的异常处理程序终止程序并打印出调用栈情况。</p><p><em><strong>try…catch</strong></em>有三种形式：<em><strong>try</strong></em>后面跟一个或多个<em><strong>catch</strong></em>块；一个<em><strong>try</strong></em>块后接一个<em><strong>finally块</strong></em>，<em><strong>try</strong></em>后面跟一个或多个<em><strong>catch</strong></em>块后接一个<em><strong>finally块</strong></em></p><h2 id="2-4-随机数"><a href="#2-4-随机数" class="headerlink" title="2.4 随机数"></a>2.4 随机数</h2><p>一般情况下我们使用都是<em><strong>伪随机数</strong></em>，它是由特定算法生成的随机数系列，并不是真正的随机数，但是有着随机数的一般性质。生成随机数需要给定随机种子，如果随机种子不变，生成的伪随机的数序也不会改变。在计算机当中往往采用伪随机数代替真正的随机数。</p><p>1、生成随机整数：</p><p>使用<em><strong>Rondom</strong></em>类创建对象，调用.Next()重载方法（方法的重载后面会讲，这里只需要知道重载就是方法的名字一样，参数类型或数目不一样）时，可以产生一个指定范围的随机整数。可以分为以下几种重载情况：</p><p><em><strong>.Next()</strong></em>:系统以当前时间为随机数种子，返回一个非负随机整数</p><p><em><strong>.Next(int maxValue)</strong></em>:系统以当前时间为随机数种子,返回一个0-~maxValue-1的随机整数</p><p><em><strong>.Next(int minValue,int maxValue)</strong></em>:系统以当前时间为随机数种子,返回一个minValue~maxValue的随机整数。</p><p>而当Random.NextDouble()接受double数据后，会与上述的方法差不多，只是返回值与形参变为了double了罢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;语法基础&quot;&gt;&lt;a href=&quot;#语法基础&quot; class=&quot;headerlink&quot; title=&quot;语法基础&quot;&gt;&lt;/a&gt;语法基础&lt;/h1&gt;&lt;p&gt;本部分重点指出&lt;em&gt;&lt;strong&gt;C#&lt;em&gt;&lt;strong&gt;不同于&lt;/strong&gt;&lt;/em&gt;C&lt;/strong&gt;&lt;/</summary>
      
    
    
    
    <category term="C#" scheme="https://dnanye.gitee.io/categories/C/"/>
    
    
    <category term="C#" scheme="https://dnanye.gitee.io/tags/C/"/>
    
    <category term=".NET FrameWork" scheme="https://dnanye.gitee.io/tags/NET-FrameWork/"/>
    
  </entry>
  
  <entry>
    <title>c#概述</title>
    <link href="https://dnanye.gitee.io/2022/09/10/C-%E6%A6%82%E8%BF%B0/"/>
    <id>https://dnanye.gitee.io/2022/09/10/C-%E6%A6%82%E8%BF%B0/</id>
    <published>2022-09-10T01:44:22.000Z</published>
    <updated>2022-09-10T04:58:00.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、C-概述"><a href="#一、C-概述" class="headerlink" title="一、C#概述"></a>一、C#概述</h1><h2 id="1-1-Mircosoft-NET平台概述"><a href="#1-1-Mircosoft-NET平台概述" class="headerlink" title="1.1 Mircosoft .NET平台概述"></a>1.1 Mircosoft .NET平台概述</h2><p><em><strong>.NET</strong></em>平台是微软开发的软件开发平台，是一种用于<em>Windows</em>操作系统的托管代码编程模型。</p><p><em><strong>.NET</strong></em>平台和<em><strong>JAVA</strong></em>一样提供了大量类库供开发者使用，其中就包括了我们正在学习的C#语言</p><p><em><strong>.NET</strong></em>框架有着以下特点：</p><ol><li>具有统一的应用层接口</li><li>基于面向对象的开发</li><li>能够支持多种开发语言</li></ol><h2 id="1-2-C-语言简介"><a href="#1-2-C-语言简介" class="headerlink" title="1.2 C#语言简介"></a>1.2 C#语言简介</h2><p><em><em>C#<strong>是微软基于</strong></em>.NET</em>**框架、面向对象的高级语言，是由JAVA、C、C++派生而来的。</p><p>C#语言的基本思想就是<strong>面向对象(OOP)</strong>,面向对象就是将数据的操作都封装到一个称为<strong>类</strong>的数据结构当中。</p><p><strong>OOP</strong>的三大特性为<strong>封装、继承和多态</strong></p><p>C#技术体系有以下：</p><ol><li>全面面向对象设计</li><li>Windows Form技术</li><li>WPF技术</li><li>WebForm技术</li><li>MVC技术</li></ol><p>C#特点：</p><ol><li>指针限制（学习过C++的同学应该深有体会）</li><li>垃圾回收机制(GC)</li><li>支持泛型编程（目前这个大多数面向对象语言已经实现）</li><li>单继承机制（不同于C++的多继承机制）</li><li>C#更加强调类型安全</li></ol><p>C#类库的基本分类：</p><ol><li>数据访问类</li><li>窗体类</li><li>安全类</li><li>XML类</li><li>线程类</li><li>输入&#x2F;输出类</li><li>Web类</li></ol><h2 id="1-3-集成开发环境"><a href="#1-3-集成开发环境" class="headerlink" title="1.3 集成开发环境"></a>1.3 集成开发环境</h2><p><em><strong>Visual Studio 2019</strong></em> </p><p>笔者曾在Linux系统下配置相关环境，但是很多功能无法完整实现，所以没有办法向Java那样一处编译，到处运行(<del>一处编译，到处报错</del>)了!!!</p><p><strong>文件后缀名问题</strong></p><p>解决方案<strong>.sln</strong></p><p>项目后缀名<strong>.csproj</strong></p><p>源代码<strong>.cs</strong></p><h2 id="1-4-C-程序结构介绍"><a href="#1-4-C-程序结构介绍" class="headerlink" title="1.4 C#程序结构介绍"></a>1.4 C#程序结构介绍</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;<span class="comment">//导入命名空间，和java当中的import关键字一样，而namespace则与java当中的package类似</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Demo1</span><span class="comment">//命名空间定义，以namespace关键字与一对大括号组成</span></span><br><span class="line">    <span class="comment">//作用是文件系统当中的目录一般。当你的程序规模非常大后，可能你的方法名和其他类的方法名会重名</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span><span class="comment">//完整类名为Demo.Program(C++的表示为Demo::Program,java则与之类似)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)<span class="comment">//与JAVA的类似(public static void main(String[] args))</span></span></span><br><span class="line">        &#123;   <span class="comment">//Main()是整个程序的入口，string[] args可接受命令行参数</span></span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!!!&quot;</span>)<span class="comment">//与Write方法一样用于标准输出设备，</span></span><br><span class="line">                <span class="comment">//而加了Line在输出时会自动加上一个换行</span></span><br><span class="line">                </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;a=&#123;0&#125;,b=&#123;1&#125;&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);<span class="comment">//格式化输出，与C语言差不多</span></span><br><span class="line">            </span><br><span class="line">            Console.ReadLine();<span class="comment">//从标准输入一行字符（回车结束），返回一个字符串string</span></span><br><span class="line">            <span class="comment">//read读取一个int,如果为字符则int数据为该字符的ASCII码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、C-概述&quot;&gt;&lt;a href=&quot;#一、C-概述&quot; class=&quot;headerlink&quot; title=&quot;一、C#概述&quot;&gt;&lt;/a&gt;一、C#概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-Mircosoft-NET平台概述&quot;&gt;&lt;a href=&quot;#1-1-Mircosoft-NE</summary>
      
    
    
    
    <category term="C#" scheme="https://dnanye.gitee.io/categories/C/"/>
    
    
    <category term="C#" scheme="https://dnanye.gitee.io/tags/C/"/>
    
    <category term=".NET FrameWork" scheme="https://dnanye.gitee.io/tags/NET-FrameWork/"/>
    
  </entry>
  
</feed>
