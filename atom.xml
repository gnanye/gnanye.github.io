<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://dnanye.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://dnanye.gitee.io/"/>
  <updated>2022-09-10T04:49:55.557Z</updated>
  <id>https://dnanye.gitee.io/</id>
  
  <author>
    <name>nanye</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面向对象</title>
    <link href="https://dnanye.gitee.io/2022/09/10/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://dnanye.gitee.io/2022/09/10/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2022-09-10T04:46:05.000Z</published>
    <updated>2022-09-10T04:49:55.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-面向对象编程"><a href="#C-面向对象编程" class="headerlink" title="C#面向对象编程"></a>C#面向对象编程</h1><p>我们之前提到很多次的面向对象，那么你应该有一个疑惑：对象，这是个嘛玩意？可以用来做什么？</p><p>在说面向对象之前，我们先看一段对话：</p><blockquote><p>苏格拉底:我们的论敌要问了:请告诉我什么是美?</p><p>希庇亚:我想他问的问题是,什么东西是美的? </p><p>苏格拉底:我想不是这个意思,他要问的是美是什么。</p><p>希庇亚:这两个问题有区别吗?</p><p>苏格拉底:有区别。他问的不是:什么东西是美的,而是:什么是 美?请你想一想。</p><p>希庇亚:我懂了,我来告诉他什么是美,叫他无法反驳。什么是美， 苏格拉底你记清楚,美是一位漂亮小姐。</p><p>苏格拉底:好!回答得真妙!不过我要是这样回答,可要遭到论敌反驳。我的论敌会这样问我:“苏格拉底,请答复这个问题:凡是美的那些东西真正是美,是不是因为有一个美本身存在,才使那些东西美 ?”我就会回答他说,一位漂亮的年轻小姐的美,就是使一切东西成其为美的。你以为如何?</p><p>希庇亚: 他敢说漂亮的年轻小姐不美吗?</p><p>苏格拉底:他当然敢,他会说:“你真妙,苏格拉底,但是一匹漂亮的母马不也可以是美的吗?神不是也曾经称赞过马的美?”</p><p>希庇亚:不错,神说母马很美,是有道理的。</p></blockquote><p>看出来了吗？苏格拉底一说的“美”是一种抽象的概念，而希庇亚则用具体的事物进行回答。</p><p>按照上面的逻辑我们可以得知一个推论：</p><p>“美”这个概念是一切美的事物所具有的抽象集合体，而“美人”、“马”这些东西则是具有“美”这个共有概念的具体实物。</p><p>那么我们也可以继续推导到我们需要的概念：某个抽象的概念是一群具有共有的特性的实物而形成的，而每个实物都具有该概念的特性。可能有点过于抽象了，我们这样说：</p><p>狗是一个抽象的概念吧，每种狗都有一些特有的属性（例如具有身高、体重）和一些动作（跑、跳、走）。</p><p>比如某一只哈士奇是一个具体的动物吧，它具有狗这个抽象概念这一特性的所有内容，它包含狗所特有的属性和动作。例如这只狗身高一米，体重40斤，它也会跑、会走。</p><p>那么我们就可以说“狗”这一对所有狗具有的所有特性的抽象概念叫做<strong>类</strong>，类就是一个<strong>模板</strong>，它并不是一个具体的东西，例如我们我们根据“狗”这抽象概念，我们以后发现一种新的生物它满足这个概念的全部内容，那么我们会将其称为某一种狗。那种生物就是狗这个抽象概念的具体实现。</p><p>按照我们前面说的那种生物的某一只实体（你随便可以将它命名为Al狗，只要是一种狗就行了）是根据“狗”这一抽象概念的具体实现我们叫做<strong>对象</strong>，既然如此某只哈士奇也是“狗”这一抽象概念的具体实现”，我们也叫哈士奇是一个对象。</p><p>好了！我们总结一下<strong>：类就是所有对象的抽象，所有对象就是类的具体实现，对象具有类这个模板的所有特性！！！</strong></p><p>既然我们知道了什么是对象了，那么面向对象又是什么呢？这一点我们和面向过程编程对比举个栗子说一下：</p><p>比如笔者看书这个行为，如果用面向过程编程的方式要这么做：笔者去寻找笔者需要看的书，笔者看到需要的书后将其拿到书桌，笔者翻开书，书被翻开，笔者好好的看书，最后将书闭合放回原处。</p><p>如果用面向对象编程的方式只要这么做：定义两个对象，一个对象是由三次元的“人”这个类具体化而成的“笔者”这个对象，笔者这个对象需要定义几个属性：姓名、性别、地址、编号——不然这怎么确认我是我呢！（笑）还要几个动作（找书、拿书、翻书、放书）才能完成看书这个事件。</p><p>一个对象是书，也需要定义几个属性：书名、ISBN编号、作者等等相关信息，不然笔者可能找到一堆莫名其妙的东西了！还有一个书被翻开的动作。</p><p>面向对象只需要将两个对象组合在一起就可以完成这一个程序的所有功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-面向对象编程&quot;&gt;&lt;a href=&quot;#C-面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;C#面向对象编程&quot;&gt;&lt;/a&gt;C#面向对象编程&lt;/h1&gt;&lt;p&gt;我们之前提到很多次的面向对象，那么你应该有一个疑惑：对象，这是个嘛玩意？可以用来做什么？&lt;/</summary>
      
    
    
    
    <category term="C#" scheme="https://dnanye.gitee.io/categories/C/"/>
    
    <category term="JAVA" scheme="https://dnanye.gitee.io/categories/C/JAVA/"/>
    
    <category term="C++" scheme="https://dnanye.gitee.io/categories/C/JAVA/C/"/>
    
    
    <category term="JAVA" scheme="https://dnanye.gitee.io/tags/JAVA/"/>
    
    <category term="C++" scheme="https://dnanye.gitee.io/tags/C/"/>
    
    <category term="面向对象" scheme="https://dnanye.gitee.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>C#语法基础</title>
    <link href="https://dnanye.gitee.io/2022/09/10/C-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <id>https://dnanye.gitee.io/2022/09/10/C-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</id>
    <published>2022-09-10T01:56:23.000Z</published>
    <updated>2022-09-10T02:10:44.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h1><p>本部分重点指出<em><strong>C#<em><strong>不同于</strong></em>C</strong></em>语言之间不同的部分，相同部分会一句带过，如果有不明白的地方请看<em><strong>《C Primer Plus》</strong></em>，在此不再赘述了。</p><h2 id="2-1-数据类型"><a href="#2-1-数据类型" class="headerlink" title="2.1 数据类型"></a>2.1 数据类型</h2><p> C#的数据类型分为值类型与引用数据类型</p><h3 id="2-1-1-值类型"><a href="#2-1-1-值类型" class="headerlink" title="2.1.1 值类型"></a>2.1.1 值类型</h3><ol><li>整型</li></ol><table><thead><tr><th>数据类型</th><th>标识符</th><th>范围</th></tr></thead><tbody><tr><td>字节</td><td>sbyte</td><td>-128~127</td></tr><tr><td>无符号字节</td><td>byte</td><td>0~255</td></tr><tr><td>短整型</td><td>short</td><td>-32768~32767</td></tr><tr><td>无符号短整型</td><td>ushort</td><td>0~65535</td></tr><tr><td>整型</td><td>int</td><td>-2147483648~2147483647</td></tr><tr><td>无符号整型</td><td>uint</td><td>0~2147483647*2+1</td></tr><tr><td>长整形</td><td>long</td><td>-~+</td></tr><tr><td>无符号整型</td><td>ulong</td><td>0~+</td></tr></tbody></table><ol start="2"><li><p>浮点型</p><p>单精度float</p></li></ol><p>​双精度double</p><p>​       十进制实数decimal       字节数为16</p><pre><code>3. 字符型charASCII、Unicode编程字符、转义字符   4. 布尔型（bool)     true\false   5. 结构类型struct   6. 枚举类型enum</code></pre><h3 id="2-1-2-引用类型"><a href="#2-1-2-引用类型" class="headerlink" title="2.1.2 引用类型"></a>2.1.2 引用类型</h3><p>在引用类型当中，不会直接存储数值，而是存储实际数值的<strong>引用（地址）</strong></p><p>C#的引用类型分为数组、类、接口、委托、内置引用类型、字符串</p><p>​<strong>1. 数组</strong></p><p>作用：将一批类型相同的数据元素存储到一块连续的内存块中，每个元素对应有一个唯一的索引。</p><p>声明一维数组：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">baseType[] arrayName;<span class="comment">//baseType为数组类型，可以是值类型，也可以是引用类型</span></span><br><span class="line"><span class="comment">//例：</span></span><br><span class="line"><span class="built_in">int</span> [] array;<span class="comment">//为int类型数组</span></span><br><span class="line"><span class="built_in">string</span>[] s1;<span class="comment">//为string类型数组</span></span><br><span class="line">Animal [] animalArr;<span class="comment">//为类类型的数组</span></span><br></pre></td></tr></table></figure><p>定义一维数组（实例化数组）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int [] array=new int[5];</span><br><span class="line">int [] array1=&#123;1,2,3,4&#125;;</span><br></pre></td></tr></table></figure><p>获取数组长度</p><p>通过Array类的<em><strong>length</strong></em>属性即可得到</p><p>二维数组：每个数组元素均由n个该类型发数据构成。</p><p>定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baseType[,] array=new baseType[N1,N2];</span><br></pre></td></tr></table></figure><p>​    <strong>2. 字符串</strong></p><p>类型关键字为string,声明一个string类型数据，其实就是在内存空间创建了一个空的引用关系。</p><p>初始化一个字符串，相当于引用了多个字符类型的数据</p><h3 id="2-1-3-类型转换"><a href="#2-1-3-类型转换" class="headerlink" title="2.1.3 类型转换"></a>2.1.3 类型转换</h3><p><strong>1.隐式转换（编译器直接转换）</strong></p><p>值类型到值类型的一般转换（例如float–&gt;double等等)在此不多赘述，我们需要了解的是将值类型到引用类型的转换。</p><p>装箱就是自动将基本数据类型转换为引用类型，拆箱就是自动将引用类型转换为基本数据类型（在java当中非常有用的一个功能）</p><p>例如要将值类型转换为object类型，可以创建一个基于该值类型的object实例。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">char</span> chData=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">object</span> obj=ch;</span><br><span class="line">Console.WriteLine(obj);<span class="comment">//输出a</span></span><br></pre></td></tr></table></figure><p><strong>2.显式转换（用户直接转换）</strong></p><p>值类型的：</p><p>（类型名）（表达式）</p><p>拆箱：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a=1;</span><br><span class="line">object obj=a;</span><br><span class="line">int intA=(int)obj;</span><br></pre></td></tr></table></figure><p>使用<em><strong>Convert</strong></em>命令显示转换，例如<em><strong>Convert.ToBoolean(value);</strong></em></p><h2 id="2-2-变量与常量-略"><a href="#2-2-变量与常量-略" class="headerlink" title="2.2 变量与常量(略)"></a>2.2 变量与常量(略)</h2><p>这个东西哪个语言都差不多，不想再说了-____-</p><h2 id="2-3-语句"><a href="#2-3-语句" class="headerlink" title="2.3 语句"></a>2.3 语句</h2><p>只列一下语句的类型</p><p><strong>1.表达式语句</strong>（算术、赋值、关系、逻辑、位等运算）</p><p><strong>2.流程控制语句</strong>（if\else、switch、while\do…while、for、foreach（用于遍历数组）、循环中断【break\continue\goto】)</p><p>这里重点提一下foreach语句：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> [] arr=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    arr[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">int</span> i <span class="keyword">in</span> arr)<span class="comment">//i代替了arr当中的每个元素的变量名，它会自动遍历所有的元素，直到遍历完成</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;array[&#123;0&#125;]=&#123;1&#125;&quot;</span>,j++,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>3.异常处理语句</strong></p><p>在程序运行过程中，经常遇到错误而中断而中断程序的运行，这种情况叫做异常。</p><p>在.NET Framework中，异常的基类（后面在继承会说明这个概念）为Exception.</p><p>处理异常的语句有<em><strong>try…catch</strong></em>、<em><strong>throw</strong></em>、<em><strong>finally</strong></em>(这个语句和大多数面向对象编程语言一致)</p><p>throw语句在特点情况下自动抛出异常，基本格式为</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> expresion<span class="comment">//expresion表示抛出的异常类型的对象（派生至System.Exception类的对象）</span></span><br></pre></td></tr></table></figure><p>当 throw 语句执行时，它后面的语句将不执行，此时程序转向调用者程序，寻找与之相匹配的 catch 语句，执行相应的异常处理程序。如果没有找到相匹配的 catch 语句，则再转向上一层的调用程序。这样逐层向上，直到最外层的异常处理程序终止程序并打印出调用栈情况。</p><p><em><strong>try…catch</strong></em>有三种形式：<em><strong>try</strong></em>后面跟一个或多个<em><strong>catch</strong></em>块；一个<em><strong>try</strong></em>块后接一个<em><strong>finally块</strong></em>，<em><strong>try</strong></em>后面跟一个或多个<em><strong>catch</strong></em>块后接一个<em><strong>finally块</strong></em></p><h2 id="2-4-随机数"><a href="#2-4-随机数" class="headerlink" title="2.4 随机数"></a>2.4 随机数</h2><p>一般情况下我们使用都是<em><strong>伪随机数</strong></em>，它是由特定算法生成的随机数系列，并不是真正的随机数，但是有着随机数的一般性质。生成随机数需要给定随机种子，如果随机种子不变，生成的伪随机的数序也不会改变。在计算机当中往往采用伪随机数代替真正的随机数。</p><p>1、生成随机整数：</p><p>使用<em><strong>Rondom</strong></em>类创建对象，调用.Next()重载方法（方法的重载后面会讲，这里只需要知道重载就是方法的名字一样，参数类型或数目不一样）时，可以产生一个指定范围的随机整数。可以分为以下几种重载情况：</p><p><em><strong>.Next()</strong></em>:系统以当前时间为随机数种子，返回一个非负随机整数</p><p><em><strong>.Next(int maxValue)</strong></em>:系统以当前时间为随机数种子,返回一个0-~maxValue-1的随机整数</p><p><em><strong>.Next(int minValue,int maxValue)</strong></em>:系统以当前时间为随机数种子,返回一个minValue~maxValue的随机整数。</p><p>而当Random.NextDouble()接受double数据后，会与上述的方法差不多，只是返回值与形参变为了double了罢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;语法基础&quot;&gt;&lt;a href=&quot;#语法基础&quot; class=&quot;headerlink&quot; title=&quot;语法基础&quot;&gt;&lt;/a&gt;语法基础&lt;/h1&gt;&lt;p&gt;本部分重点指出&lt;em&gt;&lt;strong&gt;C#&lt;em&gt;&lt;strong&gt;不同于&lt;/strong&gt;&lt;/em&gt;C&lt;/strong&gt;&lt;/</summary>
      
    
    
    
    <category term="C#" scheme="https://dnanye.gitee.io/categories/C/"/>
    
    
    <category term="C#" scheme="https://dnanye.gitee.io/tags/C/"/>
    
    <category term=".NET FrameWork" scheme="https://dnanye.gitee.io/tags/NET-FrameWork/"/>
    
  </entry>
  
  <entry>
    <title>c#概述</title>
    <link href="https://dnanye.gitee.io/2022/09/10/c-%E6%A6%82%E8%BF%B0/"/>
    <id>https://dnanye.gitee.io/2022/09/10/c-%E6%A6%82%E8%BF%B0/</id>
    <published>2022-09-10T01:44:22.000Z</published>
    <updated>2022-09-10T04:23:16.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、C-概述"><a href="#一、C-概述" class="headerlink" title="一、C#概述"></a>一、C#概述</h1><h2 id="1-1-Mircosoft-NET平台概述"><a href="#1-1-Mircosoft-NET平台概述" class="headerlink" title="1.1 Mircosoft .NET平台概述"></a>1.1 Mircosoft .NET平台概述</h2><p><em><strong>.NET</strong></em>平台是微软开发的软件开发平台，是一种用于<em>Windows</em>操作系统的托管代码编程模型。</p><p><em><strong>.NET</strong></em>平台和<em><strong>JAVA</strong></em>一样提供了大量类库供开发者使用，其中就包括了我们正在学习的C#语言</p><p><em><strong>.NET</strong></em>框架有着以下特点：</p><ol><li>具有统一的应用层接口</li><li>基于面向对象的开发</li><li>能够支持多种开发语言</li></ol><h2 id="1-2-C-语言简介"><a href="#1-2-C-语言简介" class="headerlink" title="1.2 C#语言简介"></a>1.2 C#语言简介</h2><p><em><em>C#<strong>是微软基于</strong></em>.NET</em>**框架、面向对象的高级语言，是由JAVA、C、C++派生而来的。</p><p>C#语言的基本思想就是<strong>面向对象(OOP)</strong>,面向对象就是将数据的操作都封装到一个称为<strong>类</strong>的数据结构当中。</p><p><strong>OOP</strong>的三大特性为<strong>封装、继承和多态</strong></p><p>C#技术体系有以下：</p><ol><li>全面面向对象设计</li><li>Windows Form技术</li><li>WPF技术</li><li>WebForm技术</li><li>MVC技术</li></ol><p>C#特点：</p><ol><li>指针限制（学习过C++的同学应该深有体会）</li><li>垃圾回收机制(GC)</li><li>支持泛型编程（目前这个大多数面向对象语言已经实现）</li><li>单继承机制（不同于C++的多继承机制）</li><li>C#更加强调类型安全</li></ol><p>C#类库的基本分类：</p><ol><li>数据访问类</li><li>窗体类</li><li>安全类</li><li>XML类</li><li>线程类</li><li>输入&#x2F;输出类</li><li>Web类</li></ol><h2 id="1-3-集成开发环境"><a href="#1-3-集成开发环境" class="headerlink" title="1.3 集成开发环境"></a>1.3 集成开发环境</h2><p><em><strong>Visual Studio 2019</strong></em> </p><p>笔者曾在Linux系统下配置相关环境，但是很多功能无法完整实现，所以没有办法向Java那样一处编译，到处运行(<del>一处编译，到处报错</del>)了!!!</p><p><strong>文件后缀名问题</strong></p><p>解决方案<strong>.sln</strong></p><p>项目后缀名<strong>.csproj</strong></p><p>源代码<strong>.cs</strong></p><h2 id="1-4-C-程序结构介绍"><a href="#1-4-C-程序结构介绍" class="headerlink" title="1.4 C#程序结构介绍"></a>1.4 C#程序结构介绍</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;<span class="comment">//导入命名空间，和java当中的import关键字一样，而namespace则与java当中的package类似</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Demo1</span><span class="comment">//命名空间定义，以namespace关键字与一对大括号组成</span></span><br><span class="line">    <span class="comment">//作用是文件系统当中的目录一般。当你的程序规模非常大后，可能你的方法名和其他类的方法名会重名</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span><span class="comment">//完整类名为Demo.Program(C++的表示为Demo::Program,java则与之类似)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)<span class="comment">//与JAVA的类似(public static void main(String[] args))</span></span></span><br><span class="line">        &#123;   <span class="comment">//Main()是整个程序的入口，string[] args可接受命令行参数</span></span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!!!&quot;</span>)<span class="comment">//与Write方法一样用于标准输出设备，</span></span><br><span class="line">                <span class="comment">//而加了Line在输出时会自动加上一个换行</span></span><br><span class="line">                </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;a=&#123;0&#125;,b=&#123;1&#125;&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);<span class="comment">//格式化输出，与C语言差不多</span></span><br><span class="line">            </span><br><span class="line">            Console.ReadLine();<span class="comment">//从标准输入一行字符（回车结束），返回一个字符串string</span></span><br><span class="line">            <span class="comment">//read读取一个int,如果为字符则int数据为该字符的ASCII码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、C-概述&quot;&gt;&lt;a href=&quot;#一、C-概述&quot; class=&quot;headerlink&quot; title=&quot;一、C#概述&quot;&gt;&lt;/a&gt;一、C#概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-Mircosoft-NET平台概述&quot;&gt;&lt;a href=&quot;#1-1-Mircosoft-NE</summary>
      
    
    
    
    <category term="C#" scheme="https://dnanye.gitee.io/categories/C/"/>
    
    
    <category term="C#" scheme="https://dnanye.gitee.io/tags/C/"/>
    
    <category term=".NET FrameWork" scheme="https://dnanye.gitee.io/tags/NET-FrameWork/"/>
    
  </entry>
  
</feed>
